document.addEventListener('DOMContentLoaded', function() {
    // –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    const mainMenu = document.getElementById('mainMenu');
    const gameScreen = document.getElementById('gameScreen');
    const inventoryScreen = document.getElementById('inventoryScreen');
    const playBtn = document.getElementById('playBtn');
    const inventoryBtn = document.getElementById('inventoryBtn');
    const backBtn = document.getElementById('backBtn');
    const backBtnInventory = document.getElementById('backBtnInventory');
    const betBtn = document.getElementById('betBtn');
    const betModal = document.getElementById('betModal');
    const closeModal = document.getElementById('closeModal');
    const modalGifts = document.getElementById('modalGifts');
    const rouletteLine = document.getElementById('rouletteLine');
    const participantsList = document.getElementById('participants');
    const timer = document.getElementById('timer');
    const winModal = document.getElementById('winModal');
    const closeWinModal = document.getElementById('closeWinModal');
    const winText = document.getElementById('winText');
    const giftsGrid = document.getElementById('giftsGrid');
    const wonGifts = document.getElementById('wonGifts');

    // –î–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã
    const gifts = [
        { id: 1, name: 'Normal Gift', rarity: 'Normal', img: 'https://i.yapx.ru/aGMLa.png' },
        { id: 2, name: 'Rare Gift', rarity: 'Rare', img: 'https://i.yapx.ru/aGMei.png' },
        { id: 3, name: 'Epic Gift', rarity: 'Epic', img: 'https://i.yapx.ru/aGMe1.png' },
        { id: 4, name: 'Legendary Gift', rarity: 'Legendary', img: 'https://i.yapx.ru/aGMff.png' },
        { id: 5, name: 'Immortal Gift', rarity: 'Immortal', img: 'https://i.yapx.ru/aGMfO.png' }
    ];

    let userInventory = [];
    let participants = [];
    let gameInterval;
    let timerInterval;
    let timeLeft = 30;
    let isGameRunning = false;
    let userData = {};

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
    function initTelegramWebApp() {
        if (window.Telegram && window.Telegram.WebApp) {
            const tg = window.Telegram.WebApp;
            tg.expand();
            
            userData = {
                id: tg.initDataUnsafe.user?.id || 0,
                firstName: tg.initDataUnsafe.user?.first_name || '–ò–≥—Ä–æ–∫',
                lastName: tg.initDataUnsafe.user?.last_name || '',
                username: tg.initDataUnsafe.user?.username || '',
                photoUrl: tg.initDataUnsafe.user?.photo_url || `https://i.pravatar.cc/150?img=${Math.floor(Math.random() * 70)}`
            };
        } else {
            // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–Ω–µ Telegram
            userData = {
                id: 0,
                firstName: '–ò–≥—Ä–æ–∫',
                lastName: '',
                username: 'test_user',
                photoUrl: `https://i.pravatar.cc/150?img=${Math.floor(Math.random() * 70)}`
            };
        }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
    function initGame() {
        initTelegramWebApp();
        // –î–∞–µ–º –∏–≥—Ä–æ–∫—É –ø–æ 5 –ø–æ–¥–∞—Ä–∫–æ–≤ (–ø–æ –æ–¥–Ω–æ–º—É –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞)
        userInventory = [...gifts];
        renderInventory();
    }

    // –†–µ–Ω–¥–µ—Ä –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
    function renderInventory() {
        giftsGrid.innerHTML = '';
        userInventory.forEach(gift => {
            const giftItem = document.createElement('div');
            giftItem.className = 'gift-item';
            giftItem.innerHTML = `
                <img src="${gift.img}" alt="${gift.name}" class="gift-img">
                <div class="gift-name">${gift.name}</div>
                <div class="gift-rarity">${gift.rarity}</div>
            `;
            giftsGrid.appendChild(giftItem);
        });
    }

    // –î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –∏–≥—Ä—É
    function addBot() {
        const botGifts = [...gifts];
        const randomGiftIndex = Math.floor(Math.random() * botGifts.length);
        const botGift = botGifts[randomGiftIndex];
        
        const bot = {
            id: -Math.floor(Math.random() * 1000),
            name: '–ë–æ—Ç ' + ['–ê–ª–µ–∫—Å', '–ú–∞–∫—Å', '–î–∂–æ–Ω', '–ú–∞–π–∫', '–¢–æ–º'][Math.floor(Math.random() * 5)],
            avatar: `https://i.pravatar.cc/150?bot=${Math.floor(Math.random() * 100)}`,
            gift: botGift,
            isBot: true
        };
        
        participants.push(bot);
        renderParticipants();
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –ø–æ–¥–∞—Ä–∫–∞–º–∏ –¥–ª—è —Å—Ç–∞–≤–∫–∏
    function showBetModal() {
        modalGifts.innerHTML = '';
        userInventory.forEach(gift => {
            const giftItem = document.createElement('div');
            giftItem.className = 'gift-item';
            giftItem.innerHTML = `
                <img src="${gift.img}" alt="${gift.name}" class="gift-img">
                <div class="gift-name">${gift.name}</div>
                <div class="gift-rarity">${gift.rarity}</div>
            `;
            giftItem.addEventListener('click', () => makeBet(gift));
            modalGifts.appendChild(giftItem);
        });
        betModal.style.display = 'flex';
    }

    // –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É
    function makeBet(gift) {
        // –£–¥–∞–ª—è–µ–º –ø–æ–¥–∞—Ä–æ–∫ –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
        userInventory = userInventory.filter(item => item.id !== gift.id);
        renderInventory();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞
        const participant = {
            id: userData.id,
            name: userData.username || userData.firstName,
            avatar: userData.photoUrl,
            gift: gift,
            isBot: false
        };
        
        participants.push(participant);
        
        // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –æ–¥–∏–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –±–æ—Ç–∞
        if (participants.length === 1) {
            addBot();
        }
        
        renderParticipants();
        betModal.style.display = 'none';
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
        if (!isGameRunning) {
            startGameTimer();
        }
    }

    // –†–µ–Ω–¥–µ—Ä —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    function renderParticipants() {
        participantsList.innerHTML = '';
        participants.forEach(participant => {
            const participantItem = document.createElement('div');
            participantItem.className = 'participant-item';
            participantItem.innerHTML = `
                <img src="${participant.avatar}" alt="${participant.name}" class="participant-avatar">
                <div class="participant-info">
                    <div class="participant-name">${participant.name} ${participant.isBot ? 'ü§ñ' : ''}</div>
                    <div class="participant-gift">
                        <img src="${participant.gift.img}" alt="${participant.gift.name}" width="30">
                        <span>${participant.gift.name}</span>
                    </div>
                </div>
            `;
            participantsList.appendChild(participantItem);
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä—É–ª–µ—Ç–∫—É
        updateRoulette();
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä—É–ª–µ—Ç–∫–∏
    function updateRoulette() {
        rouletteLine.innerHTML = '';
        
        // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ä—É–ª–µ—Ç–∫–∏
        const minItems = 20;
        const itemsNeeded = Math.max(minItems, participants.length * 3);
        
        // –°–æ–∑–¥–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –¥–ª—è –ø–ª–∞–≤–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏
        for (let i = 0; i < itemsNeeded; i++) {
            const participant = participants[i % participants.length];
            const avatar = document.createElement('img');
            avatar.src = participant.avatar;
            avatar.className = 'participant-avatar';
            avatar.alt = participant.name;
            rouletteLine.appendChild(avatar);
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É —Ä—É–ª–µ—Ç–∫–∏
        const itemWidth = 110; // –®–∏—Ä–∏–Ω–∞ –∞–≤–∞—Ç–∞—Ä–∞ + –æ—Ç—Å—Ç—É–ø—ã
        const rouletteWidth = itemsNeeded * itemWidth;
        rouletteLine.style.width = `${rouletteWidth}px`;
    }

    // –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –∏–≥—Ä—ã
    function startGameTimer() {
        isGameRunning = true;
        timeLeft = 30;
        timer.style.display = 'block';
        timer.textContent = timeLeft;
        
        timerInterval = setInterval(() => {
            timeLeft--;
            timer.textContent = timeLeft;
            
            if (timeLeft <= 0) {
                clearInterval(timerInterval);
                startRoulette();
            }
        }, 1000);
    }

    // –ó–∞–ø—É—Å–∫ —Ä—É–ª–µ—Ç–∫–∏
    function startRoulette() {
        const duration = 5000; // 5 —Å–µ–∫—É–Ω–¥
        const startTime = Date.now();
        const startPosition = 0;
        const itemWidth = 110; // –®–∏—Ä–∏–Ω–∞ –∞–≤–∞—Ç–∞—Ä–∞ + –æ—Ç—Å—Ç—É–ø—ã
        const itemsCount = rouletteLine.children.length;
        const rouletteWidth = itemsCount * itemWidth;
        
        // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (—Å–ª—É—á–∞–π–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫)
        const winnerIndex = Math.floor(Math.random() * participants.length);
        const stopPosition = winnerIndex * itemWidth + itemWidth / 2 - rouletteLine.offsetWidth / 2;
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        const spinDistance = 3000 + Math.random() * 2000;
        const totalDistance = spinDistance + stopPosition;
        
        function animate() {
            const currentTime = Date.now();
            const elapsed = currentTime - startTime;
            const progress = Math.min(elapsed / duration, 1);
            
            // –ó–∞–º–µ–¥–ª–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ü–µ
            const easing = 1 - Math.pow(1 - progress, 3);
            
            // –ü–æ–∑–∏—Ü–∏—è —Å –∑–∞–º–µ–¥–ª–µ–Ω–∏–µ–º
            const position = startPosition + (totalDistance - startPosition) * easing;
            rouletteLine.style.transform = `translateX(-${position % rouletteWidth}px)`;
            
            if (progress < 1) {
                requestAnimationFrame(animate);
            } else {
                // –†—É–ª–µ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∞—Å—å, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
                setTimeout(() => {
                    showWinner(winnerIndex);
                }, 1000);
            }
        }
        
        requestAnimationFrame(animate);
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    function showWinner(winnerIndex) {
        const winner = participants[winnerIndex];
        isGameRunning = false;
        
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–µ—Ç—Ç–∏
        createConfetti();
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–±–µ–¥–µ
        let message = '';
        wonGifts.innerHTML = '';
        
        if (winner.isBot) {
            message = `–ë–æ—Ç ${winner.name} –≤—ã–∏–≥—Ä–∞–ª –≤–∞—à –ø–æ–¥–∞—Ä–æ–∫!`;
            wonGifts.innerHTML = `<img src="${winner.gift.img}" alt="${winner.gift.name}">`;
        } else if (winner.id === userData.id) {
            // –ò–≥—Ä–æ–∫ –≤—ã–∏–≥—Ä–∞–ª - –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –ø–æ–¥–∞—Ä–∫–∏ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
            participants.forEach(p => {
                if (p.id !== userData.id) {
                    userInventory.push(p.gift);
                    wonGifts.innerHTML += `<img src="${p.gift.img}" alt="${p.gift.name}">`;
                }
            });
            message = `–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${participants.length - 1} –ø–æ–¥–∞—Ä–∫–æ–≤!`;
            renderInventory();
        } else {
            message = `–ò–≥—Ä–æ–∫ ${winner.name} –≤—ã–∏–≥—Ä–∞–ª –≤—Å–µ –ø–æ–¥–∞—Ä–∫–∏!`;
            participants.forEach(p => {
                wonGifts.innerHTML += `<img src="${p.gift.img}" alt="${p.gift.name}">`;
            });
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        winText.textContent = message;
        winModal.style.display = 'flex';
        
        // –û—á–∏—â–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        participants = [];
        renderParticipants();
        timer.style.display = 'none';
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞ –∫–æ–Ω—Ñ–µ—Ç—Ç–∏
    function createConfetti() {
        const colors = ['#f8e9a1', '#ff6b6b', '#4ecdc4', '#ff8e53', '#a1c4fd'];
        
        for (let i = 0; i < 100; i++) {
            const confetti = document.createElement('div');
            confetti.className = 'confetti';
            confetti.style.left = Math.random() * 100 + 'vw';
            confetti.style.backgroundColor = colors[Math.floor(Math.random() * colors.length)];
            confetti.style.width = Math.random() * 10 + 5 + 'px';
            confetti.style.height = Math.random() * 10 + 5 + 'px';
            confetti.style.animationDuration = Math.random() * 3 + 2 + 's';
            confetti.style.animationDelay = Math.random() * 2 + 's';
            document.body.appendChild(confetti);
            
            // –£–¥–∞–ª—è–µ–º –∫–æ–Ω—Ñ–µ—Ç—Ç–∏ –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
            setTimeout(() => {
                confetti.remove();
            }, 5000);
        }
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    playBtn.addEventListener('click', () => {
        mainMenu.style.display = 'none';
        gameScreen.style.display = 'block';
    });

    inventoryBtn.addEventListener('click', () => {
        mainMenu.style.display = 'none';
        inventoryScreen.style.display = 'block';
    });

    backBtn.addEventListener('click', () => {
        gameScreen.style.display = 'none';
        mainMenu.style.display = 'flex';
    });

    backBtnInventory.addEventListener('click', () => {
        inventoryScreen.style.display = 'none';
        mainMenu.style.display = 'flex';
    });

    betBtn.addEventListener('click', showBetModal);

    closeModal.addEventListener('click', () => {
        betModal.style.display = 'none';
    });

    closeWinModal.addEventListener('click', () => {
        winModal.style.display = 'none';
    });

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    initGame();
});